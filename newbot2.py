from settings import TOKEN

import telebot
from telebot import types

import requests
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
from transliterate import translit
from langdetect import detect


bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é')
    markup.add(btn1)
    bot.send_message(message.from_user.id, '–Ø –∫–æ—Ä–æ—á–µ –∑–Ω–∞–µ—à—å —á—Ç–æ —É–º–µ—é?' '\n' '–Ø –º–æ–≥—É —É—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–±–µ –∫–∞—Ä–∞–æ–∫–µ –∑–∞ —Ç–≤–æ–∏ –Ω—é–¥–∏—Å—ã)', reply_markup=markup)
    bot.send_message(message.from_user.id, '–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,' '\n' 
                                           '–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–µ–Ω, —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!')


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == "–ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é" or message.text == '–ò—Å–∫–∞—Ç—å –µ—â–µ':
        keyboard = types.ReplyKeyboardMarkup()
        sent = bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ (artist - song)", reply_markup=keyboard)
        bot.register_next_step_handler(sent, review)


def review(message):
    try:
        def transl(name):
            slovar = {'–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                      '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'i', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
                      '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h',
                      '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e',
                      '—é': 'u', '—è': 'ya', '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
                      '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'I', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
                      '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H',
                      '–¶': 'C', '–ß': 'CH', '–®': 'SH', '–©': 'SCH', '–™': '', '–´': 'y', '–¨': '', '–≠': 'E',
                      '–Æ': 'U', '–Ø': 'YA', ',': '', '?': '', ' ': '_', '~': '', '!': '', '@': '', '#': '',
                      '$': '', '%': '', '^': '', '&': '', '*': '', '(': '', ')': '', '=': '', '+': '',
                      ':': '', ';': '', '<': '', '>': '', '\'': '', '"': '', '\\': '', '/': '', '‚Ññ': '',
                      '[': '', ']': '', '{': '', '}': '', '“ë': '', '—ó': '', '—î': '', '“ê': 'g', '–á': 'i',
                      '–Ñ': 'e', '‚Äî': ''}

            for key in slovar:
                name = name.replace(key, slovar[key])

            return name

        def make_data():
            bot.send_message(message.from_user.id, text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..')
            message_to_save = message.text
            artist = message_to_save[0: message_to_save.find('-')]
            song = message_to_save[message_to_save.find('-') + 1: len(message_to_save)]
            all_param = list()

            if artist[len(artist) - 1] == ' ':
                artist = artist[:-1]

            if song[0] == ' ':
                song = song[1:len(song)]

            if ' ' in artist:
                artist = artist.replace(' ', '-')
            if ' ' in song:
                song = song.replace(' ', '-')

            if '—è' or '–Ø' in song:
                song = song.replace('—è', 'ya')
                song = song.replace('–Ø', 'ya')

            if '—è' or '–Ø' in artist:
                artist = artist.replace('—è', 'ya')
                artist = artist.replace('–Ø', 'ya')

            if detect(artist) == 'ru' or detect(song) == 'ru':
                artist = transl(artist)
                song = transl(song)

            link_to_text = f'https://txtsong.ru/{artist}/{artist}-{song}/'
            link_to_load = f'https://mp3store.net/get-music/{artist}-{song}/'
            all_param.append(artist)
            all_param.append(song)
            all_param.append(link_to_text)
            all_param.append(link_to_load)
            print(link_to_load)
            print(link_to_text)
            return all_param

        def parse_text(link1):
            r = requests.get(link1)
            if r.status_code == 200:
                bot.send_message(message.from_user.id, text='–ò—â—É —Ç–µ–∫—Å—Ç.. üìÉüìë')
            soup = BeautifulSoup(r.text, 'html.parser')
            quotes = soup.find(class_='the_content')
            data = ''
            data = data + quotes.get_text(separator='\n')

            data = data.splitlines()
            new_res = list(filter(lambda a: a != '', data))
            main_line = ''
            for elem in new_res:
                main_line += elem + '\n'
            return main_line

        def load_mp3(link, singer, composition):
            r = requests.get(link, headers={'User-Agent': UserAgent().chrome})
            if r.status_code == 200:
                bot.send_message(message.from_user.id, text='–ó–∞–≥—Ä—É–∂–∞—é –≤–∞–º –ø–µ—Å–Ω—é.. üé∂üéµ')
            soup = BeautifulSoup(r.text, 'html.parser')
            quotes = soup.find(class_="sound-download").find_all('a')
            url_to_file = quotes[0].get('href')
            res = requests.get('https://mp3store.net/' + url_to_file, headers={'User-Agent': UserAgent().chrome})
            path_to_file = fr'C:\Users\79149\PycharmProjects\bot\data\{singer}_{composition}.mp3'
            with open(path_to_file, 'wb') as f:
                f.write(res.content)
            return path_to_file

        full_data = make_data()
        text_song = parse_text(full_data[2])
        audio_file = load_mp3(full_data[3], full_data[0], full_data[1])
        audio = open(audio_file, 'rb')
        bot.send_audio(message.chat.id, audio)
        audio.close()

        if len(text_song) > 4095:
            for x in range(0, len(text_song), 4095):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn2 = types.KeyboardButton('–ò—Å–∫–∞—Ç—å –µ—â–µ')
                markup.add(btn2)
                bot.send_message(message.from_user.id, text=text_song[x:x + 4095], reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn2 = types.KeyboardButton('–ò—Å–∫–∞—Ç—å –µ—â–µ')
            markup.add(btn2)
            bot.send_message(message.from_user.id, text=text_song, reply_markup=markup)

    except AttributeError:
        bot.send_message(message.from_user.id, text='–û–π, —è —Ç–∞–∫–æ–π –ø–µ—Å–Ω–∏ —Ä–æ—Ç —à–∞—Ç–∞–ª, —è –µ–µ –Ω–µ –∑–Ω–∞—é ü§¨' '\n' '–ü–∏—à–∏ –ø–æ –Ω–æ–≤–æ–π üë¨')
        sent = bot.send_message(message.from_user.id, text='–ü—Ä–∏—à–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ (artist - song)')
        bot.register_next_step_handler(sent, review)


bot.polling()



